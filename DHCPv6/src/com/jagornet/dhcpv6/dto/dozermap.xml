<?xml version="1.0" encoding="UTF-8"?>
  <!DOCTYPE mappings PUBLIC "-//DOZER//DTD MAPPINGS//EN"
    "http://dozer.sourceforge.net/dtd/dozerbeanmapping.dtd">
<mappings>

  <configuration>
    <custom-converters> <!-- these are always bi-directional -->
      <converter type="com.jagornet.dhcpv6.util.OperatorConverter" >
        <class-a>com.jagornet.dhcpv6.xml.Operator$Enum</class-a>
        <class-b>java.lang.String</class-b>
      </converter>
    </custom-converters>
  </configuration>

  <mapping>
<!-- 
	 The bean-factory attribute should not be required because the XML
     objects will/should not be instantiated by Dozer.  That is, the XML
     is either created from the DTO objects, or the DTO objects are
     created from the XML.  Note also, that if the bean-factory is set
     for the XxxYyyOption classes (e.g. DnsServersOption), then there is
     a nasty side-effect of the auto-instantiation via XMLBeanFactory's
     invoking the internal XxxYyyOption.Factory.newInstance() method
     which does not "set" the 'code' and 'name' fixed attribute values.
     
    <class-a bean-factory="net.sf.dozer.util.mapping.factory.XMLBeanFactory">
-->
    <class-a>
    	com.jagornet.dhcpv6.xml.DhcpV6ServerConfigDocument$DhcpV6ServerConfig
    </class-a>
    <class-b>
    	com.jagornet.dhcpv6.dto.DhcpV6ServerConfigDTO
    </class-b>
    
  </mapping>
  
</mappings>
